{"ast":null,"code":"import { urls } from '../../utils/constants';\nvar backend_url = process.env.REACT_APP_BACKEND_HOST;\nexport const getAllBooks = async () => {\n  const books = await fetch(urls.getAllBooksUrl + '?_limit=30&_expand=author&_expand=category', {\n    method: 'GET',\n    headers: {\n      \"content-type\": \"application/json\",\n      accept: \"application/json\"\n    }\n  });\n  return books.json();\n};\nexport const getBooksReading = async () => {\n  const books = await fetch(backend_url + `/users/1/bookshelf`, {\n    method: 'GET',\n    headers: {\n      \"content-type\": \"application/json\",\n      accept: \"application/json\"\n    }\n  });\n  return books.json();\n};\nexport const getBookById = async id => {\n  const book = await fetch(backend_url + `/books/${id}`);\n  return book.json();\n};\nexport const getBookShelfByUserIdAndBookId = async (userId, bookId) => {\n  console.log(\"getting book shelf\");\n  const bookShelf = await fetch(backend_url + `/users/${userId}/books/${bookId}`);\n  return bookShelf.json();\n};\nexport const postBookShelfService = async (userId, requestBody) => {\n  console.log(\"post bookshelf\");\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n  };\n  const response = await fetch(backend_url + `/users/${userId}/bookshelf/`, requestOptions);\n  return response.json();\n};\nexport const putBookShelfService = async (userId, bookShelfId, requestBody) => {\n  console.log(\"put bookshelf\");\n  const requestOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n  };\n  const response = await fetch(backend_url + `/users/${userId}/bookshelf/${bookShelfId}`, requestOptions);\n  return response.json();\n};","map":{"version":3,"sources":["/home/dattd/Pictures/bootcamp-5/bc-5-frontend/src/service/BookManagementService/index.js"],"names":["urls","backend_url","process","env","REACT_APP_BACKEND_HOST","getAllBooks","books","fetch","getAllBooksUrl","method","headers","accept","json","getBooksReading","getBookById","id","book","getBookShelfByUserIdAndBookId","userId","bookId","console","log","bookShelf","postBookShelfService","requestBody","requestOptions","body","JSON","stringify","response","putBookShelfService","bookShelfId"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA9B;AACA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACnC,QAAMC,KAAK,GAAG,MAAMC,KAAK,CAACP,IAAI,CAACQ,cAAL,GAAsB,4CAAvB,EAAqE;AAC1FC,IAAAA,MAAM,EAAE,KADkF;AAE1FC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,MAAM,EAAE;AAFH;AAFiF,GAArE,CAAzB;AAOA,SAAOL,KAAK,CAACM,IAAN,EAAP;AACH,CATM;AAWP,OAAO,MAAMC,eAAe,GAAG,YAAY;AACvC,QAAMP,KAAK,GAAG,MAAMC,KAAK,CAACN,WAAW,GAAE,oBAAd,EAAmC;AACpDQ,IAAAA,MAAM,EAAE,KAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,MAAM,EAAE;AAFH;AAF2C,GAAnC,CAAzB;AAOA,SAAOL,KAAK,CAACM,IAAN,EAAP;AACH,CATM;AAWP,OAAO,MAAME,WAAW,GAAG,MAAOC,EAAP,IAAc;AAErC,QAAMC,IAAI,GAAG,MAAMT,KAAK,CAACN,WAAW,GAAE,UAASc,EAAG,EAA1B,CAAxB;AAGA,SAAOC,IAAI,CAACJ,IAAL,EAAP;AACH,CANM;AASP,OAAO,MAAMK,6BAA6B,GAAG,OAAOC,MAAP,EAAeC,MAAf,KAA0B;AACnEC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,QAAMC,SAAS,GAAG,MAAMf,KAAK,CAACN,WAAW,GAAE,UAASiB,MAAO,UAASC,MAAO,EAA9C,CAA7B;AACA,SAAOG,SAAS,CAACV,IAAV,EAAP;AACH,CAJM;AAMP,OAAO,MAAMW,oBAAoB,GAAG,OAAML,MAAN,EAAcM,WAAd,KAA8B;AAC9DJ,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAMI,cAAc,GAAG;AACnBhB,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBgB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,WAAf;AAHa,GAAvB;AAKA,QAAMK,QAAQ,GAAG,MAAMtB,KAAK,CAACN,WAAW,GAAE,UAASiB,MAAO,aAA9B,EAA4CO,cAA5C,CAA5B;AACA,SAAOI,QAAQ,CAACjB,IAAT,EAAP;AACH,CATM;AAYP,OAAO,MAAMkB,mBAAmB,GAAG,OAAMZ,MAAN,EAAca,WAAd,EAA2BP,WAA3B,KAA2C;AAC1EJ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMI,cAAc,GAAG;AACnBhB,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBgB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,WAAf;AAHa,GAAvB;AAKA,QAAMK,QAAQ,GAAG,MAAMtB,KAAK,CAACN,WAAW,GAAE,UAASiB,MAAO,cAAaa,WAAY,EAAvD,EAA0DN,cAA1D,CAA5B;AACA,SAAOI,QAAQ,CAACjB,IAAT,EAAP;AACH,CATM","sourcesContent":["import { urls } from '../../utils/constants'\n\nvar backend_url = process.env.REACT_APP_BACKEND_HOST;\nexport const getAllBooks = async () => {\n    const books = await fetch(urls.getAllBooksUrl + '?_limit=30&_expand=author&_expand=category', {\n        method: 'GET',\n        headers: {\n            \"content-type\": \"application/json\",\n            accept: \"application/json\",\n        },\n    })\n    return books.json()\n}\n\nexport const getBooksReading = async () => {\n    const books = await fetch(backend_url+`/users/1/bookshelf`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                accept: \"application/json\",\n            },\n        })\n    return books.json()\n}\n\nexport const getBookById = async (id) => {\n\n    const book = await fetch(backend_url+`/books/${id}`)\n\n\n    return book.json()\n}\n\n\nexport const getBookShelfByUserIdAndBookId = async (userId, bookId) => {\n    console.log(\"getting book shelf\")\n    const bookShelf = await fetch(backend_url+`/users/${userId}/books/${bookId}`)\n    return bookShelf.json();\n}\n\nexport const postBookShelfService = async(userId, requestBody) => {\n    console.log(\"post bookshelf\")\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n    };\n    const response = await fetch(backend_url+`/users/${userId}/bookshelf/`, requestOptions);\n    return response.json();\n}\n\n\nexport const putBookShelfService = async(userId, bookShelfId, requestBody) => {\n    console.log(\"put bookshelf\")\n    const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n    };\n    const response = await fetch(backend_url+`/users/${userId}/bookshelf/${bookShelfId}`, requestOptions);\n    return response.json();\n}\n\n"]},"metadata":{},"sourceType":"module"}